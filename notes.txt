//App Overview and goals
1. understand the purpose of reducers
2. make API requests with Redux
3. understand redux-thunk "Middleware"
https://jsonplaceholder.typicode.com/

//How to fetch data in a redux App
1. Components gets rendered onto the screen
2. Components "componentDidMount" lifecycle methods
3.We call action creator from 'componentDidMount'
(Components are generally responsible for fetching data they need by calling an action creator)
4.Action creator runs code to make an API request
5. API Responds with data
6. Action creator returns an 'action' the fetched data on the payload property.
(Action creators are responsible for making an API Requests)
7. Some Reducers sees action, returns the data off the 'payload'
8. Because we generated some new state object, redux/react-redux cause our app to be rendered
(We get fetched data into a component by generating a new state in our redux store, then getting that into our component through mapStateToProps)

//Middlewares in Redux

Action Creators => Action => dispatch => Middleware => reducers => state
=>We can use as many as middlewares as we want.

//Behind the scences of React Thunk 

(Relax the rules to action creators)

Rules with react-thunk => - Action creators can return action objects or functions (this is the only rule that changed)

//Rules of Reducers

- The reducers shouldn't return undefined (should return a value) (can return for example)
- Reducers must look only at the previous state
NO : 
-querySelector
-network connects
it's work with the data it's already have from the actions

//Mutation in javaScript
changing any content in js called mutation like arrays and objects
strings and numbers are inmutable

Why mutation is bad for redux  ?

Because simply the combineReducers function check for a state array, if we mutate an array it's the same array (arrangement in the memory) but if we create a new array (it alocates in a new arrangement in the memory) this would cause the app not re-render as it detects no change in the state